% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_events.R
\name{find_events}
\alias{find_events}
\title{Wrapper to call bioacoustics::threshold_detection}
\usage{
find_events(
  wav.file = NULL,
  audacity = FALSE,
  overwrite = TRUE,
  threshold = 10,
  min_dur = 10,
  max_dur = 5000,
  min_TBE = 40,
  max_TBE = Inf,
  LPF = 15000,
  HPF = 80,
  FFT_size = 1024,
  start_thr = 20,
  end_thr = 48,
  SNR_thr = 4,
  angle_thr = 125,
  NWS = 1500,
  time_scale = 2,
  ...
)
}
\arguments{
\item{wav.file}{Audio file. Currently supported are WAV or MP3 files.}

\item{audacity}{logical. If TRUE export audacity lables as txt file}

\item{overwrite}{logical}

\item{threshold}{integer. Sensitivity of the audio event detection function (peak-picking algorithm) in dB.
A threshold value of 14 dB above SNR is recommended. Higher values increase the risk of leaving audio events undetected (false negative).
In a noisy recording (low SNR) this sensitivity threshold may be set at 12 dB,
but a value below 10 dB is not recommended. Default setting is 14 dB above SNR.}

\item{min_dur}{numeric. Minimum duration threshold in milliseconds (ms).
Extracted audio events shorter than this threshold are ignored. Default setting is 1.5 ms.}

\item{max_dur}{numeric. Maximum duration threshold in milliseconds (ms).
Extracted audio events longer than this threshold are ignored. The default setting is 80 ms.}

\item{min_TBE}{numeric. Minimum time window between two audio events in milliseconds (ms). If the time interval between two
successive audio events is shorter than this window, they are ignored. The default setting is 20 ms.}

\item{max_TBE}{numeric. Maximum time window between two audio events in milliseconds (ms). If the time interval between two
successive audio events is longer than this window, they are ignored. The default setting is 1000 ms.}

\item{LPF}{integer. Low-Pass Filter (Hz). Frequencies above the cutoff are greatly attenuated.
Default is set internally at the Nyquist frequency of the recording.}

\item{HPF}{integer. High-Pass Filter (Hz). Frequencies below the cutoff are greatly attenuated.
Default setting is 16000 Hz. A default of 1000 Hz is recommended for most bird vocalizations.}

\item{FFT_size}{integer. Size of the Fast Fourrier Transform (FFT) window. Default setting is 256.}

\item{start_thr}{integer. Right to left amplitude threshold (dB) for audio event extraction, from the audio event centroid.
The last FFT where the amplitude level is equal or above this threshold is considered the start of the audio event.
Default setting is 40 dB. 20 dB is recommended for extracting bird vocalizations.}

\item{end_thr}{integer. Left to right amplitude threshold (dB) for audio event extraction, from the audio event centroid.
The last FFT where the amplitude level is equal or above this threshold is considered the end of the audio event.
Default setting is 20 dB. 30 dB is recommended for extracting bird vocalizations.}

\item{SNR_thr}{integer. SNR threshold (dB) at which the extraction of the audio event stops.
Default setting is 10 dB. 8 dB is recommended for bird vocalizations.}

\item{angle_thr}{integer. Angle threshold (°) at which the audio event extraction stops.
Default setting is 40°. 125° is recommended for extracting bird vocalizations.}

\item{NWS}{integer. Length of the time window used for background noise estimation in the recording (ms).
A longer window size is less sensitive to local variations in the background noise.
Default setting is 100 ms.}

\item{time_scale}{numeric. Time resolution of the spectrogram in milliseconds (ms) per pixel (px). Default setting is 0.1 ms for bat echolocation calls.
A default of 2 ms/px is recommended for most bird vocalizations.}

\item{...}{Not yet implemented! optional arguments passed on to \code{\link[bioacoustics]{threshold_detection}}.}
}
\value{
list (see \code{\link[bioacoustics]{threshold_detection}})
}
\description{
Queries bioacoustics::\code{\link[bioacoustics]{threshold_detection}} to detect events in a audio file and exports labels to explore the file in audacity
}
\examples{
# example code
path <- system.file("extdata", "20211220_064253.wav", package = "NocMigR2")
TD <- find_events(
wav.file = path,
audacity = FALSE, # Write audacity labels
threshold = 8, # SNR in db
min_dur = 20, # min length in ms
max_dur = 300, # max length in ms
LPF = 5000, # low-pass filter at 500
HPF = 1000)
}
